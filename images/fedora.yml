---
image:
  distribution: fedora

source:
  downloader: fedora-http
  url: https://kojipkgs.fedoraproject.org

files:
  - path: /etc/machine-id
    generator: dump

  - path: /etc/fstab
    generator: dump
    types:
      - container

  - path: /var/lib/dbus/machine-id
    generator: remove

  - path: /etc/hostname
    generator: hostname

  - path: /etc/hosts
    generator: hosts

  - name: eth0.network
    path: /etc/systemd/network/eth0.network
    generator: dump
    content: |-
      [Match]
      Name=eth0

      [Network]
      DHCP=yes

      [DHCP]
      ClientIdentifier=mac
    variants:
      - default
      - podman
    types:
      - container

  - name: delegate.conf
    path: /etc/systemd/system/user@.service.d/delegate.conf
    generator: dump
    content: |-
      [Service]

      Delegate=yes
    variants:
      - podman

  - name: inotifywait.service
    path: /etc/systemd/user/inotifywait.service
    generator: dump
    content: |-
      [Unit]
      Description=Executes script when a file has changed.
      # systemctl enable --global inotifywait.service

      ConditionUser=!root

      StartLimitIntervalSec=120
      StartLimitBurst=10

      [Service]
      Type=oneshot
      Restart=on-failure
      RestartSec=5s
      ExecStart=inotifywait.sh

      [Install]
      # Start by default on boot
      WantedBy=multi-user.target default.target
    variants:
      - podman

  - name: inotifywait.bash
    path: /usr/local/bin/inotifywait.sh
    generator: dump
    content: |-
      #!/usr/bin/env bash

      set -eux

      helper() {
        ls /etc/containers/systemd/users/$UID | \
        grep ".kube$\|.container$" | \
        cut --delimiter="." --fields=1 | \
        sed "s/$/.service/g"
      }

      inotifywait --monitor \
        --include ".container$|.env$|.kube$|.yml$" \
        --timefmt "%Y-%m-%dT%T%z" \
        --format "%T %w %e %f" \
        --event modify \
        /etc/containers/systemd/users/$UID |
      while read -r file_modified; do
        echo "$file_modified"
        systemctl --user daemon-reload
        systemctl --user restart $(helper)
      done
    mode: 0755
    variants:
      - podman

#  - path: /var/lib/systemd/linger/rootless-container
#    generator: dump
#    variants:
#      - podman

  - name: meta-data
    generator: cloud-init
    variants:
      - cloud

  - name: network-config
    generator: cloud-init
    content: |-
      {% if config_get("user.network-config", "") == "" %}version: 1
      config:
        - type: physical
          name: {% if instance.type == "virtual-machine" %}enp5s0{% else %}eth0{% endif %}
          subnets:
            - type: {% if config_get("user.network_mode", "") == "link-local" %}manual{% else %}dhcp{% endif %}
              control: auto
            - type: dhcp6
              control: auto{% else %}{{ config_get("user.network-config", "") }}{% endif %}
    variants:
      - cloud

  - name: user-data
    generator: cloud-init
    variants:
      - cloud

  - name: vendor-data
    generator: cloud-init
    variants:
      - cloud

packages:
  manager: dnf
  update: true
  cleanup: true
  sets:
    - packages:
        - cpio
        - file
        - findutils
        - fipscheck
        - gettext
        - glibc-all-langpacks
        - hardlink
        - hostname
        - ipcalc
        - iproute
        - iproute-tc
        - iputils
        - kbd
        - kmod
        - openssh-clients
        - passwd
        - pigz
        - policycoreutils
        - procps-ng
        - sudo
        - systemd-udev
        - which
        - xz
      action: install

    - packages:
        - cloud-init
        - openssh-server
      action: install
      variants:
        - cloud

    - packages:
        - bash-completion
        # Prevent error, but for some reason is not need
        # unix @->/run/systemd/private: read: connection reset by peer: unknown.
        # See https://rootlesscontaine.rs/getting-started/common/login
        #- dbus-daemon
        - dnf-automatic
        - inotify-tools
        - podman
        - systemd-container
        - vim
      action: install
      variants:
        - podman

    - packages:
        - libsss_idmap
        - libsss_nss_idmap
        - sssd-client
      action: remove

    - packages:
        - fuse-overlayfs
        - qemu-user-static
      action: remove
      types:
        - container
      variants:
        - podman

actions:
  - trigger: post-unpack
    action: |-
      #!/bin/sh
      set -eux

      # Increase connection timeout
      echo timeout=60 >> /etc/dnf/dnf.conf

      # Let dnf find the fastest mirror
      echo fastestmirror=True >> /etc/dnf/dnf.conf

      # Backup all repo files
      for repo in $(ls /etc/yum.repos.d/*.repo); do
        cp "${repo}" "${repo}.bak"
      done

  - trigger: post-unpack
    action: |-
      #!/bin/sh
      set -eux

      # Use Fedora 38 GPG key to avoid package installation errors
      for repo in $(ls /etc/yum.repos.d/*.repo); do
        grep -q 'RPM-GPG-KEY-fedora-38' "${repo}" && continue

        sed -ri 's#^gpgkey=.*#\0 file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-38-$basearch#g' "${repo}"
      done
    architectures:
      - aarch64
      - x86_64
    releases:
      - Rawhide

  - trigger: post-unpack
    action: |-
      #!/bin/sh
      set -eux

      # Use baseurl instead of metalink to avoid networking issues
      for repo in $(ls /etc/yum.repos.d/*.repo); do
        grep -q '^#baseurl' "${repo}" || continue

        sed -ri 's/^metalink=.*/#\0/g;s@^#(baseurl=)http://download.example/pub/fedora/linux(.*)@\1https://muug.ca/mirror/fedora-secondary\2@g' "${repo}"
      done
    architectures:
      - ppc64le
      - s390x

  - trigger: post-packages
    action: |-
      #!/bin/sh
      set -eux

      umount -l /etc/resolv.conf || true
      rm /etc/resolv.conf
      ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
      systemctl enable systemd-resolved
      cp -R /etc/skel/.bash* /root/

      systemctl enable systemd-networkd

  - trigger: post-packages
    action: |-
      #!/bin/sh
      set -eux

      systemctl enable cloud-init
      systemctl enable cloud-config
      systemctl enable cloud-final
    variants:
      - cloud

  - trigger: post-packages
    action: |-
      #!/bin/env bash
      set -eux

      # Variables
      USERNAME="container-rootless"
      USER_UID="${USER_UID:-1000}"
      USER_GID="${USER_UID}"

      # Enable dnf auto-update
      systemctl enable dnf-automatic-install.timer

      # Create the rootless user account
      #getent group sudo >/dev/null 2>&1 || groupadd --system sudo
      useradd \
          --user-group \
          --create-home \
          --shell /bin/bash \
          --comment "rootless user for container creation" \
          --uid "${USER_UID}" \
          "${USERNAME}"

      # Create and prepare directory for quadlet
      install \
          --directory \
          --mode=0700 \
          --owner="${USER_UID}" \
          --group="${USER_GID}" \
          /etc/containers/systemd/users/"${USER_UID}"

      # ???
      #machinectl shell container-rootless@ /usr/bin/systemctl --user enable podman-auto-update.timer dbus.service

      # same as loginctl enable-linger
      mkdir -p /var/lib/systemd/linger
      > /var/lib/systemd/linger/"${USERNAME}"

      # Fix permissions of newuidmap and newgidmap files
      # see https://github.com/containers/buildah/issues/3834
      rpm --restore shadow-utils 2>/dev/null
    variants:
      - podman

  - trigger: post-files
    action: |-
      #!/bin/sh
      set -eux

      # Restore repos
      for repo in $(ls /etc/yum.repos.d/*.bak); do
        mv "${repo}" ${repo%.*}
      done

  - trigger: post-files
    action: |-
      #!/usr/bin/env bash
      set -eux

      systemctl enable --global inotifywait.service
